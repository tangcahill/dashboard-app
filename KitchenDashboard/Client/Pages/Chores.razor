@page "/chores"
@using MudBlazor
@inject NavigationManager NavigationManager
@inject ChoreService ChoreService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h4">Chores Manager</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Home"
                       Color="Color.Primary"
                       OnClick='() => NavigationManager.NavigateTo("/")' />
    </MudStack>

    <MudStack Row AlignItems="AlignItems.Stretch" Spacing="2" Class="my-4">
        <MudButton Variant="Variant.Outlined"
                   FullWidth="true"
                   OnClick="() => ShowView(ViewType.Active)">
            Today's Chores
        </MudButton>
        <MudButton Variant="Variant.Outlined"
                   FullWidth="true"
                   OnClick="() => ShowView(ViewType.List)">
            All Chores
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   FullWidth="true"
                   StartIcon="@Icons.Material.Filled.AddBox"
                   OnClick="() => ShowView(ViewType.Add)"
                   Style="height:60px">
            Add Chore
        </MudButton>
    </MudStack>

    @if (currentView == ViewType.Active)
    {
        @if (!RecurringChores.Any() && !OneOffChores.Any())
        {
            <MudText Typo="Typo.h6" Align="Align.Center">No chores to do!</MudText>
        }
        else
        {
            <MudGrid Spacing="2">
                @foreach (var c in RecurringChores)
                {
                    <MudItem xs="12" sm="6">
                        <MudCard Class="pa-2">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                <MudText Class="flex-grow-1 clickable"
                                         OnClick="() => CompleteRecurring(c.Id)">
                                    @c.Description
                                </MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Info"
                                               OnClick="() => UpdateRecurring(c.Id)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               OnClick="() => DeleteRecurring(c.Id)" />
                            </MudStack>
                        </MudCard>
                    </MudItem>
                }
                @foreach (var o in OneOffChores)
                {
                    <MudItem xs="12" sm="6">
                        <MudCard Class="pa-2">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                <MudText Class="flex-grow-1 clickable"
                                         OnClick="() => CompleteOneOff(o.Id)">
                                    @o.Description
                                </MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Info"
                                               OnClick="() => UpdateOneOff(o.Id)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               OnClick="() => DeleteOneOff(o.Id)" />
                            </MudStack>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    }
    else if (currentView == ViewType.Add)
    {
        <MudDivider Class="my-4" />
        <MudPaper Class="pa-4" Elevation="0">
            <MudText Typo="Typo.h6">Add Recurring</MudText>
            <MudTextField T="string"
                          @bind-Value="newRecurring.Description"
                          Label="Description"
                          FullWidth="true" />
            <MudStack Row AlignItems="AlignItems.Center"
                      Spacing="2"
                      Class="mt-2 flex-wrap">
                @foreach (var d in Enum.GetValues<DayOfWeek>())
                {
                    <MudCheckBox T="bool"
                                 @bind-Checked="daySel[d]"
                                 Label="@d.ToString()[..3]" />
                }
            </MudStack>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="AddRecurring"
                       Class="mt-2">
                @((newRecurring.Id == Guid.Empty) ? "Add Recurring" : "Save Changes")
            </MudButton>
        </MudPaper>

        <MudPaper Class="pa-4 mt-4" Elevation="0">
            <MudText Typo="Typo.h6">Add One-Off</MudText>
            <MudTextField T="string"
                          @bind-Value="newOneOff.Description"
                          Label="Description"
                          FullWidth="true" />
            <MudDatePicker T="DateTime?"
                           @bind-Date="newOneOff.Date"
                           Format="dd/MM/yyyy"
                           Class="mt-2" />
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="AddOneOff"
                       Class="mt-2">
                @((newOneOff.Id == Guid.Empty) ? "Add One-Off" : "Save Changes")
            </MudButton>
        </MudPaper>
    }
    else if (currentView == ViewType.List)
    {
        <MudDivider Class="my-4" />

        <MudText Typo="Typo.h6">All Recurring Chores</MudText>
        <MudList T="RecurringChore" Dense="true">
            @foreach (var c in RecurringChores)
            {
                <MudListItem T="RecurringChore" Value="c" Text="@c.Description">
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Info"
                                   OnClick="() => UpdateRecurring(c.Id)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   OnClick="() => DeleteRecurring(c.Id)" />
                </MudListItem>
            }
        </MudList>

        <MudText Typo="Typo.h6" Class="mt-4">All One-Off Chores</MudText>
        <MudList T="OneOffChore" Dense="true">
            @foreach (var o in OneOffChores)
            {
                <MudListItem T="OneOffChore" Value="o" Text="@($"{o.Description} ({o.Date:dd/MM/yyyy})")">
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Info"
                                   OnClick="() => UpdateOneOff(o.Id)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   OnClick="() => DeleteOneOff(o.Id)" />
                </MudListItem>
            }
        </MudList>
    }
</MudContainer>

@code {
    enum ViewType { Active, Add, List }
    private ViewType currentView = ViewType.Active;

    private List<RecurringChore> RecurringChores => ChoreService.RecurringChores;
    private List<OneOffChore> OneOffChores     => ChoreService.OneOffChores;

    private RecurringChore newRecurring = new() { Id = Guid.Empty };
    private OneOffChore    newOneOff    = new() { Id = Guid.Empty, Date = DateTime.Today };
    private Dictionary<DayOfWeek,bool> daySel =
        Enum.GetValues<DayOfWeek>().Cast<DayOfWeek>().ToDictionary(d => d, _ => false);

    protected override async Task OnInitializedAsync()
    {
        await ChoreService.LoadTodayAsync();
    }

    void ShowView(ViewType view)
    {
        currentView = view;
    }

    async Task CompleteRecurring(Guid id)
    {
        await OnRecurringChecked(id);
    }

    async Task CompleteOneOff(Guid id)
    {
        await OnOneOffChecked(id);
    }

    void UpdateRecurring(Guid id)
    {
        var c = RecurringChores.First(x => x.Id == id);
        newRecurring = new RecurringChore
        {
            Id          = c.Id,
            Description = c.Description,
            Monday      = c.Monday,
            Tuesday     = c.Tuesday,
            Wednesday   = c.Wednesday,
            Thursday    = c.Thursday,
            Friday      = c.Friday,
            Saturday    = c.Saturday,
            Sunday      = c.Sunday
        };
        daySel = Enum.GetValues<DayOfWeek>()
                     .Cast<DayOfWeek>()
                     .ToDictionary(d => d, d => c.GetType()
                                               .GetProperty(d.ToString())!
                                               .GetValue(c) as bool? == true);
        ShowView(ViewType.Add);
    }

    void UpdateOneOff(Guid id)
    {
        var o = OneOffChores.First(x => x.Id == id);
        newOneOff = new OneOffChore
        {
            Id          = o.Id,
            Description = o.Description,
            Date        = o.Date
        };
        ShowView(ViewType.Add);
    }

    async Task DeleteRecurring(Guid id)
    {
        await ChoreService.DeleteRecurringAsync(id);
        await ChoreService.LoadTodayAsync();
        ShowView(ViewType.Active);
    }

    async Task DeleteOneOff(Guid id)
    {
        await ChoreService.DeleteOneOffAsync(id);
        await ChoreService.LoadTodayAsync();
        ShowView(ViewType.Active);
    }

    private async Task OnRecurringChecked(Guid id)
    {
        RecurringChores.RemoveAll(c => c.Id == id);
        await ChoreService.CompleteRecurringAsync(id);
    }

    private async Task OnOneOffChecked(Guid id)
    {
        OneOffChores.RemoveAll(o => o.Id == id);
        await ChoreService.CompleteOneOffAsync(id);
    }

    private async Task AddRecurring()
    {
        newRecurring.Monday    = daySel[DayOfWeek.Monday];
        newRecurring.Tuesday   = daySel[DayOfWeek.Tuesday];
        newRecurring.Wednesday = daySel[DayOfWeek.Wednesday];
        newRecurring.Thursday  = daySel[DayOfWeek.Thursday];
        newRecurring.Friday    = daySel[DayOfWeek.Friday];
        newRecurring.Saturday  = daySel[DayOfWeek.Saturday];
        newRecurring.Sunday    = daySel[DayOfWeek.Sunday];

        if (newRecurring.Id == Guid.Empty)
            await ChoreService.AddRecurringAsync(newRecurring);
        else
            await ChoreService.UpdateRecurringAsync(newRecurring);

        newRecurring = new() { Id = Guid.Empty };
        daySel = Enum.GetValues<DayOfWeek>().Cast<DayOfWeek>().ToDictionary(d => d, _ => false);

        await ChoreService.LoadTodayAsync();
        ShowView(ViewType.Active);
    }

    private async Task AddOneOff()
    {
        if (newOneOff.Id == Guid.Empty)
            await ChoreService.AddOneOffAsync(newOneOff);
        else
            await ChoreService.UpdateOneOffAsync(newOneOff);

        newOneOff = new() { Id = Guid.Empty, Date = DateTime.Today };

        await ChoreService.LoadTodayAsync();
        ShowView(ViewType.Active);
    }
}
